# Useful for SystemC debug

init-if-undefined $loaded_systemc = 0
if $loaded_systemc != 0
  printf "\e[1m\e[91mWarning: systemc already loaded -- skipping\e[0m\n"
  # cause an error to abort
  skip_loading
end
printf "loading\n"
set $loaded_systemc = 1

define break_on_return
  finish
end

#------------------------------------------------------------------------------
define sc-info
  call Debug::info()
end
document sc-info
  Display current situation
end
printf "Defined sc-info\n"

#------------------------------------------------------------------------------
define sc-debugging
  call Debug::set_debugging(1)
end
document sc-debugging
  Set verbosity to SC_DEBUG
end
printf "Defined sc-debugging\n"

#------------------------------------------------------------------------------
define sc-threads
  rbreak \b[A-Z][a-z].*_thread\b
end
document sc-threads
  Break on user SC_THREADS
end
printf "Defined sc-threads\n"

#------------------------------------------------------------------------------
define sc-methods
  rbreak \b[A-Z][a-z].*_method\b
end
document sc-methods
  Break on user SC_METHODs
end
printf "Defined sc-methods\n"

#------------------------------------------------------------------------------
define sc-overrides
  rbreak \b[A-Z][a-z].*::before_end_of_elaboration
  rbreak \b[A-Z][a-z].*::end_of_elaboration
  rbreak \b[A-Z][a-z].*::start_of_simulation
  rbreak \b[A-Z][a-z].*::end_of_simulation
end
document sc-overrides
  Break on all call-backs
end
printf "Defined sc-overrides\n"

#------------------------------------------------------------------------------
define sc-basics
  dont-repeat
  init-if-undefined $did_basics = 0
  if $did_basics != 0
    printf "\e[1m\e[91mWarning: systemc already executed -- skipping\e[0m\n"
  else
    set $did_basics = 1
    set pagination off
    #---------------------------------------------------------------------------
    set breakpoint pending on
    tbreak Top_module::Top_module
    set variable $b1 = $bpnum
    commands $b1
      printf "\e[1m\e[95mEntered top-level constructor.\e[0m\n"
    end
    break sc_interrupt_here
    set variable $b2 = $bpnum
    break sc_stop_here
    set variable $b3 = $bpnum
    break breakpoint
    commands $b2 $b3
      silent
      backtrace
      frame 3
    end
    catch throw
    catch catch
    #---------------------------------------------------------------------------
    set pagination on
  end
end
document sc-basics
  Break on main, top, sc_interrupt_here, sc_stop_here, throw and catch
end
printf "Defined sc-basics\n"

define sc-skip
  init-if-undefined $did_skip = 0
  if $did_skip != 0
    printf "\e[1m\e[91mWarning: systemc already executed -- skipping \e[0m\n"
  else
    set $did_skip = 1
    dont-repeat
    set pagination off
    #---------------------------------------------------------------------------
    skip -rfunction sc_core::sc_.*
    skip -rfunction tlm::.*
    skip -rfunction std::.*
    #---------------------------------------------------------------------------
    set pagination on
  end
end
document sc-skip
  Skip sysemc/tlm/std library elements
end
printf "Defined sc-skip\n"

define sc-next-trigger
  init-if-undefined $did_next_trigger = 0
  if $did_next_trigger == 0
    set $did_next_trigger = 1
    dont-repeat
    set pagination off
    #-------------------------------------------------------------------------
    set $nt_count = 0
    break sc_module::next_trigger
    set $bp_nt = $bpnum
    commands $bp_nt
      silent
      printf "\e[1m\e[91m--- next_trigger ---\e[0m\n"
      if $nt_count != 0
        set $nt_count = $nt_count - 1
      end
      if $nt_count != 0
        continue
      end
    end
    #-------------------------------------------------------------------------
    set pagination on
  end
  if $argc != 0
    set $nt_count = $arg0
    if $arg0 == 0
      disable breakpoint $bp_nt
      printf "\e[1m\e[91mDisabled break on sc_module::next_trigger()\e[0m\n"
    else
      if $arg0 == 1
        enable breakpoint $bp_nt
        printf "\e[1m\e[92mEnabled break on sc_module::next_trigger()\e[0m\n"
      end
    end
  end
end
document sc-next-trigger
  sc-next-trigger [#] // Output a marker when encountering next_trigger().
  Optionally, turn breakpoint off(0), on(1), or wait N next_triggers before stopping.
end
printf "Defined sc-next_trigger\n"

define sc-wait
  init-if-undefined $did_wait = 0
  if $did_wait == 0
    set $did_wait = 1
    set pagination off
    #-------------------------------------------------------------------------
    set $wait_count = 0
    break sc_module::wait
    set $bp_wait = $bpnum
    commands $bp_wait
      silent
      printf "\e[1m\e[91m--- wait ---\e[0m\n"
      if $wait_count != 0
        set $wait_count = $wait_count - 1
      end
      if $wait_count != 0
        continue
      end
    end
    #-------------------------------------------------------------------------
    set pagination on
  end
  if $argc != 0
    set $wait_count = $arg0
    if $arg0 == 0
      disable breakpoint $bp_wait
      printf "\e[1m\e[91mDisabled break on sc_module::wait()\e[0m\n"
    else
      if $arg0 == 1
        enable breakpoint $bp_wait
        printf "\e[1m\e[92mEnabled break on sc_module::wait()\e[0m\n"
      end
    end
  end
end
document sc-wait
  sc-wait [#] // Output a marker when encountering wait().
  Optionally, turn breakpoint off(0), on(1), or wait N waits before stopping.
end
printf "Defined sc-wait\n"


#------------------------------------------------------------------------------
define sc-all
  dont-repeat
  init-if-undefined $did_systemc = 0
  if $did_systemc != 0
    printf "\e[1m\e[91mWarning: sc-all already executed -- skipping \e[0m\e[0m\n"
  else
    set $did_systemc = 1
    set pagination off
    #---------------------------------------------------------------------------
    sc-basics
    sc-skip
    sc-wait
    sc-next-trigger
    sc-threads
    sc-overrides
    info breakpoints
    printf "--------------------------------------------------------------------------------\n"
    #---------------------------------------------------------------------------
    set pagination on
  end
end
document sc-all
  Initialization for debugging systemc
end
printf "Defined sc-all\n"

# vim:syntax=gdb:nospell
