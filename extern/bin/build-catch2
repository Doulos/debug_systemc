#!/usr/bin/env bash
#
if [[ "$!" =~ ^-{1,2}h(elp)?$ ]]; then
  cat <<'HELPTEXT'
Name
----
build-catch2 - Install the Catch2 [framework](https://github.com/catchorg/Catch2) for the current project.

Synopsis
--------
build-catch2 --help|-h # produces this text
build-catch2

Description
-----------
Installs the [Catch2 test framework](https://github.com/catchorg/Catch2/blob/devel/README.md) under `extern/`, which is located based on the top-level git repository's location.

IMPORTANT
---------
Must be run inside project git repository.

HELPTEXT
  exit 0;
fi

LIBNAME="catch2"
GIT_URL="https://github.com/catchorg/Catch2.git"

function Realpath() {
  if [[ $# == 0 ]]; then set - .; fi
  /usr/bin/perl '-MCwd(abs_path)' -le '$p=abs_path(join(q( ),@ARGV));print $p if -e $p' "$*"
}

# Using Essential-IO
SCRIPTDIR="$(Realpath "$(dirname "$0")"/../scripts)"
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "${HOME}"/.local/scripts)"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  SCRIPTDIR="$(Realpath "$(dirname "$0")")"
fi
if [[ ! -r "${SCRIPTDIR}/Essential-IO" ]]; then
  printf "FATAL: Missing required source file '%s'\n" "${SCRIPTDIR}/Essential-IO"
  crash
fi
# shellcheck disable=SC2250,SC1091
source "$SCRIPTDIR/Essential-IO"

TOOL_PATH="$(Realpath "$0")"
Report_info "Attempting to build ${LIBNAME} using ${TOOL_PATH}"
HERE="$(pwd)"
if [[ "${HERE}" =~ .*/extern ]]; then
  cd "${HERE/extern*/}" || Report_fatal "Trying to escape extern sub-directory failed"
fi
WORKTREE_DIR="$(git rev-parse --show-toplevel)" || Report_fatal "Not in git repo"
REPO_DIR="$(basename "${GIT_URL}" .git)"
BUILD_DIR="build"
INSTALL_DIR="${WORKTREE_DIR}/extern"
mkdir -p "${INSTALL_DIR}"
cd "${INSTALL_DIR}" || Report_fatal "Unable to enter ${INSTALL_DIR}"
if [[ -d "${REPO_DIR}/.git" ]]; then
  _do git -C "${REPO_DIR}" pull
  Report_info "Successfully updated ${LIBNAME}"
else
  rm -fr "${REPO_DIR}"
  _do git clone "${GIT_URL}" || Report_fatal "Unable to clone"
  Report_info "Successfully installed ${LIBNAME}"
fi
cd "${REPO_DIR}" || Report_fatal "Unable to enter ${REPO_DIR}"
_do cmake -B "${BUILD_DIR}" -H. -DBUILD_TESTING=Off -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" || Report_fatal "Unable to configure cmake"
_do cmake --build "${BUILD_DIR}" --target install|| Report_fatal "Failed to compile, link or install"
Report_info "Successfully built ${LIBNAME}"

# vim:nospell
